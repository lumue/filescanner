buildscript {
    ext {
        springBootVersion ='2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
		
    }
    dependencies {
        classpath('io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE')
	    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    	classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}




apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    runtime
    testCompile
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}




jar {
    baseName = 'filescanner-server'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenCentral()
	maven{
		url('http://maven.springframework.org/milestone/')
		}
    maven { url('http://repo.springsource.org/libs-milestone/') }
	maven { url "https://jitpack.io" }
    maven { url('http://download.oracle.com/maven')}
	maven { url "http://repo.spring.io/snapshot" }
	maven { url "http://repo.spring.io/milestone" }
	maven { url 'http://repo.spring.io/plugins-release' }
}

// Import Spring Boot's bom, spring-boot-dependencies
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
}

dependencies {

    //spring
    compile("org.springframework.boot:spring-boot-starter-web")
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
	compile("org.springframework.boot:spring-boot-starter-integration")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile 'io.micrometer:micrometer-registry-jmx:latest.release'

	compile("org.springframework.integration:spring-integration-core")
	compile("org.springframework.integration:spring-integration-event")
	compile("org.springframework.integration:spring-integration-file")
	//json serializer
    compile group: 'com.google.guava', name: 'guava', version: '12.0'
	compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.5.1'
	compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.5.1'

    //tika parser
    compile 'org.apache.tika:tika-core:1.10'
    compile 'org.apache.tika:tika-parsers:1.10'

    //nfo
    compile 'com.github.lumue:nfotools:master-SNAPSHOT'
	compile 'com.github.lumue:infojsontools:master-SNAPSHOT'

    compile 'commons-io:commons-io:2.4'

	//logging
	compile 'org.slf4j:slf4j-api:1.7.18'

    //test
    testCompile 'junit:junit:4.11'

    //integration-test
    integrationTestCompile 'org.springframework.boot:spring-boot-starter-test'
}


task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}


group = 'media:5000'

task docker(dependsOn: build) {

	dependsOn 'dockerBuild'

}

task dockerBuild(type: Exec){
	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['build', '-t', "lumue/filescanner-server:${project.version}", '.']

	doFirst {
		copy {
			from jar
			into stageDir
		}
		copy {
			from file('src/main/docker/Dockerfile')
			into stageDir
		}
	}

}

task dockerRun(type: Exec){

	dependsOn 'dockerBuild'

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['run','-d',
	      '--name',"filescanner-server_${project.version}",
	      '-p','8001:8001',
	      "lumue/filescanner-server:${project.version}"]

	doLast{
		sleep(10*1000)
	}

}

task dockerStop(type: Exec){

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['stop',"filescanner-server_${project.version}"]

	ignoreExitValue true

}

task dockerRemove(type: Exec){

	dependsOn 'dockerStop'

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['rm','-f',"filescanner-server_${project.version}"]

	ignoreExitValue true
}

task dockerTagLatest(type: Exec){

	mustRunAfter 'dockerBuild'

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args= ['tag', "lumue/filescanner-server:${project.version}", 'lumue/filescanner-server:latest']

}


task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}
