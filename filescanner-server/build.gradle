buildscript {
  ext.kotlin_version = '1.4.30-M1'
  ext {
    springBootVersion = '2.4.0'
  }
  repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }

  }
  dependencies {
    classpath('io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE')
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    classpath('se.transmode.gradle:gradle-docker:1.2')
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}


apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'

sourceSets {
  integrationTest {
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output
  }
}

sourceSets {
  integrationtest {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}


configurations {
  runtime
  testCompile
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}


idea {
  module {
    downloadJavadoc = true
    downloadSources = true

    testSourceDirs += file('src/integrationTest/java')
    testResourceDirs += file('src/integrationTest/resources')
  }
}


jar {
  baseName = 'filescanner-server'
  version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11


repositories {
  mavenCentral()
  maven {
    url('http://maven.springframework.org/milestone/')
  }
  maven { url('http://repo.springsource.org/libs-milestone/') }
  maven { url "https://jitpack.io" }
  maven { url('http://download.oracle.com/maven') }
  maven { url "http://repo.spring.io/snapshot" }
  maven { url "http://repo.spring.io/milestone" }
  maven { url 'http://repo.spring.io/plugins-release' }
  maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
}


dependencies {
  project (":mdresolver-generated-client")
  //spring
  compile("org.springframework.boot:spring-boot-starter-webflux")
  compile 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
  compile("org.springframework.boot:spring-boot-starter-integration")
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile 'io.micrometer:micrometer-registry-prometheus:latest.release'
  compile("org.springframework.integration:spring-integration-core")
  compile("org.springframework.integration:spring-integration-event")
  compile("org.springframework.integration:spring-integration-file")
  //json serializer
  compile group: 'com.google.guava', name: 'guava', version: '12.0'
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.5.1'
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.5.1'
	compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
  compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.1'



  //tika parser
  compile 'org.apache.tika:tika-core:1.10'
  compile 'org.apache.tika:tika-parsers:1.10'

  //nfo
  compile 'com.github.lumue:nfotools:1.6.RELEASE'
  compile 'com.github.lumue:infojsontools:master-SNAPSHOT'
  compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.6")

  compile 'commons-io:commons-io:2.4'

  //logging
  compile 'org.slf4j:slf4j-api:1.7.18'

  // https://mvnrepository.com/artifact/org.aspectj/aspectjweaver
  compile group: 'org.aspectj', name: 'aspectjweaver', version: '1.9.1'

  //test
  testCompile 'junit:junit:4.11'

  //integration-test
  integrationTestCompile 'org.springframework.boot:spring-boot-starter-test'
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}


task integrationTest(type: Test) {
  useJUnitPlatform()
  group = 'verification'

  testClassesDirs = sourceSets.integrationtest.output.classesDirs
  classpath = sourceSets.integrationtest.runtimeClasspath
}


group = 'media:5000'

task docker(dependsOn: build) {

  dependsOn 'dockerBuild'

}

task dockerBuild(type: Exec, dependsOn: bootJar) {
  def stageDir = file(project.buildDir.absolutePath + '/docker')
  def bootJarDir = file(project.buildDir.absolutePath + '/libs')

  workingDir stageDir
  executable = 'docker'
  args = ['build', '-t', "lumue/filescanner-server:${project.version}", '.']

  doFirst {
    copy {
      from bootJarDir
      into stageDir
    }
    copy {
      from file('src/main/docker/Dockerfile')
      into stageDir
    }
  }

}

task dockerRun(type: Exec) {

  dependsOn 'dockerBuild'

  def stageDir = file(project.buildDir.absolutePath + '/docker')

  workingDir stageDir
  executable = 'docker'
  args = ['run', '-d',
          '--name', "filescanner-server_${project.version}",
          '-p', '8001:8001',
          "lumue/filescanner-server:${project.version}"]

  doLast {
    sleep(10 * 1000)
  }

}

task dockerStop(type: Exec) {

  def stageDir = file(project.buildDir.absolutePath + '/docker')

  workingDir stageDir
  executable = 'docker'
  args = ['stop', "filescanner-server_${project.version}"]

  ignoreExitValue true

}

task dockerRemove(type: Exec) {

  dependsOn 'dockerStop'

  def stageDir = file(project.buildDir.absolutePath + '/docker')

  workingDir stageDir
  executable = 'docker'
  args = ['rm', '-f', "filescanner-server_${project.version}"]

  ignoreExitValue true
}

task dockerTagLatest(type: Exec) {

  mustRunAfter 'dockerBuild'

  def stageDir = file(project.buildDir.absolutePath + '/docker')

  workingDir stageDir
  executable = 'docker'
  args = ['tag', "lumue/filescanner-server:${project.version}", 'lumue/filescanner-server:latest']

}
compileKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}
compileTestKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}


